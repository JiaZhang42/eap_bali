---
title: "CAPM & Beta Estimation (Chapter 8 in Bali)"
format: html
toc: true
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  eval: false
---

## Rolling window beta estimation

In most cases, market beta for any given period t is estimated using **only data from periods prior to and including period t**. A common approach is to estimate regression (8.3) using **one yearâ€™s worth of daily excess return** data.

minimum obs requirement: 200 data points

Correlation:

There is a substantial common component between all of the measures of beta. The correlations between measures that use a longer measurement period are higher than those based on short measurement periods, potentially indicating that a **longer measurement period provides stable and therefore more accurate measurement**.

Persistence:

The use of longer measurement periods results in more accurate measures of beta. In addition, beta seems to be most accurately mea- sured using daily return data.

```{r}
library(tidyverse)
library(duckdb)
library(scales)
library(slider)
library(furrr)
library(lmtest)
library(broom)
library(sandwich)
source(here::here('R/my_functions.R'))
```

```{r}
tidy_finance <- dbConnect(duckdb(), here::here('data/tidy_finance'))
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") |>
  select(permno, month, industry, ret_excess) |>
  collect()
factors_ff3_monthly <- tbl(tidy_finance, "factors_ff3_monthly") |>
  select(month, mkt_excess) |>
  collect()
crsp_monthly <- crsp_monthly |>
  left_join(factors_ff3_monthly, join_by(month))
```

```{r}
estimate_capm <- function(data, min_obs = 1) {
  if (nrow(data) < min_obs) {
    beta <- NA_real_
  } else {
    fit <- lm(ret_excess ~ mkt_excess, data = data)
    beta <- as.numeric(coefficients(fit)[2])
  }
  return(beta)
}

roll_capm_estimation <- function(data, months, min_obs = 1){
  data <- data %>% arrange(month)
  betas <- slide_period_vec(
    .x = data, 
    .i = data$month, 
    .period = 'month',
    .before = months - 1, 
    .complete = F, 
    .f = ~estimate_capm(., min_obs)
  )
  
  tibble(
    month = data$month, 
    beta = betas
  )
}

a <- crsp_monthly %>% 
  filter(permno == 14593) %>% 
  roll_capm_estimation(months = 60, min_obs = 48)
```

## Parallelization

```{r}
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
beta_monthly <- crsp_monthly %>% 
  nest(data = c(month, ret_excess, mkt_excess)) %>% 
  mutate(beta = future_map(
    data, ~ roll_capm_estimation(., months = 60, min_obs = 48)
  )) |>
  unnest(beta) |>
  select(permno, month, beta_monthly = beta) |>
  drop_na()

dbWriteTable(tidy_finance, 'beta', beta_monthly, overwrite = T)
```

## ts-average beta across industries

```{r}
# beta_monthly <- tbl(tidy_finance, 'beta') %>% collect()
beta_monthly %>% 
  left_join(crsp_monthly, join_by(permno, month)) %>% 
  group_by(industry, permno) %>% 
  summarise(beta = mean(beta_monthly), .groups = 'drop') %>% 
  ggplot(aes(x = reorder(industry, beta, FUN = median), y = beta)) + 
  geom_boxplot() + 
  coord_flip() + 
  theme_hierarchy()

```

## cs beta percentiles over time

```{r}
beta_monthly %>% 
  group_by(month) %>% 
  reframe(quantile = seq(0.1, 0.9, 0.1), 
          x = quantile(beta_monthly, quantile)) %>% 
  ggplot(aes(month, x, color = as.factor(quantile*100))) +  
  geom_line() + 
  theme_hierarchy() + 
  ggsci::scale_color_bmj()
```

## Beta & stock returns

-   portfolio sorts or fama-macbeth regression

fundamental prediction of CAPM: positive relationship between market beta and expected returns

data:

-   flat or negative relationship between beta and expected return

-   non-zero alpha

popular explanation of the negative relation:

-   BAB: leverage limited investors with low risk aversion choose high-beta stocks, so BAB earns higher expected return by providing liquidity to these investors.

### Beta-sorted portfolios (univariate)

motivation:

CAPM - higher beta -\> higher (excess) expected return

**idea behind portfolio sorting:**

the idea is to sort individual stocks into portfolios, where the stocks within each portfolio are similar with respect to a sorting variable, such as firm size. The different portfolios then represent well-diversified investments that differ in the level of the sorting variable. You can then attribute the differences in the return distribution to the impact of the sorting variable.

```{r}
tidy_finance <- dbConnect(duckdb(), here::here('data/tidy_finance'))
dbListTables(tidy_finance)
crsp_monthly <- tbl(tidy_finance, "crsp_monthly") |>
  select(permno, month, ret_excess, mktcap_lag) |>
  collect()

factors_ff3_monthly <- tbl(tidy_finance, "factors_ff3_monthly") |>
  select(month, mkt_excess) |>
  collect()

beta <- tbl(tidy_finance, "beta") |>
  select(permno, month, beta_monthly) |>
  collect()
```

**Lag beta by one month** (don't use `lag()` directly for the reason stated in `data` chapter). Also, note that all raw materials for making monthly betas become available after a month, which is not true for compustat characteristics.

```{r}
beta_lag <- beta %>% 
  mutate(month = month %m+% months(1), beta_lag = beta_monthly, .keep = 'unused')

data_for_sorts <- crsp_monthly %>% 
  inner_join(beta_lag, join_by(permno, month))
```

**create periodic breakpoints**

1.  one breakpoint

    ```{r}
    beta_portfolios <- data_for_sorts %>% 
      group_by(month) %>% 
      mutate(
        breakpoint = median(beta_lag), 
        portfolio = if_else(beta_lag <= breakpoint, 'low', 'high')
      ) %>% 
      group_by(month, portfolio) %>% 
      summarise(ret = weighted.mean(ret_excess, mktcap_lag), .groups = 'drop')


    beta_longshort <- beta_portfolios %>% 
      pivot_wider(names_from = portfolio, values_from = ret) %>% 
      mutate(long_short = high - low)

    model_fit <- lm(long_short ~ 1, data = beta_longshort)
    coeftest(model_fit, vcov = NeweyWest)

    # t w/o newey west adjustment is larger in absolute value due to smaller se
    mean(beta_longshort$long_short)/sd(beta_longshort$long_short)*sqrt(nrow(beta_longshort))
    ```

2.  multiple breakpoints

    ```{r}
    assign_portfolio <- function(sorting_variable, 
                                 n_portfolios = 10) {
      # Compute breakpoints
      breakpoints <- sorting_variable |>
        quantile(
          probs = seq(0, 1, length.out = n_portfolios + 1),
          na.rm = TRUE,
          names = FALSE
        )

      # Assign portfolios
      sorting_variable %>% 
        findInterval(breakpoints, all.inside = T)
    }
    ```

```{r}
beta_portfolios <- data_for_sorts %>% 
  group_by(month) %>% 
  mutate(portfolio = assign_portfolio(beta_lag) %>% as.factor()) %>% 
  group_by(portfolio, month) %>% 
  summarise(ret_excess = weighted.mean(ret_excess, mktcap_lag), 
            .groups = 'drop') %>% 
  left_join(factors_ff3_monthly, join_by(month))
```

```{r}
beta_portfolios_summary <- beta_portfolios |>
  nest(data = c(month, ret_excess, mkt_excess)) |>
  mutate(estimates = map(
    data, ~ tidy(lm(ret_excess ~ 1 + mkt_excess, data = .x))
  )) |>
  unnest(estimates) |> 
  select(portfolio, term, estimate) |> 
  pivot_wider(names_from = term, values_from = estimate) |> 
  rename(alpha = `(Intercept)`, beta = mkt_excess) |> 
  left_join(
    beta_portfolios |> 
      group_by(portfolio) |> 
      summarize(ret_excess = mean(ret_excess),
                .groups = "drop"), join_by(portfolio)
  )
```

```{r}
beta_portfolios_summary |>
  ggplot(aes(x = portfolio, y = beta)) +
  geom_bar(stat = "identity") +
  theme_hierarchy()

beta_portfolios_summary |>
  ggplot(aes(x = portfolio, y = alpha, fill = portfolio)) +
  geom_bar(stat = "identity") +
  labs(
    title = "CAPM alphas of beta-sorted portfolios",
    x = "Portfolio",
    y = "CAPM alpha",
    fill = "Portfolio"
  ) +
  scale_y_continuous(labels = percent) +
  theme_hierarchy()
```

### security market line

```{r}
sml_capm <- lm(ret_excess ~ 1 + beta, data = beta_portfolios_summary)$coefficients

beta_portfolios_summary |>
  ggplot(aes(
    x = beta, 
    y = ret_excess, 
    color = portfolio
  )) +
  geom_point() +
  geom_abline(
    intercept = 0,
    slope = mean(factors_ff3_monthly$mkt_excess),
    linetype = "solid"
  ) +
  geom_abline(
    intercept = sml_capm[1],
    slope = sml_capm[2],
    linetype = "dashed"
  ) +
  scale_y_continuous(
    labels = percent,
    limit = c(0, mean(factors_ff3_monthly$mkt_excess) * 2)
  ) +
  scale_x_continuous(limits = c(0, 2)) +
  labs(
    x = "Beta", y = "Excess return", color = "Portfolio",
    title = "Average portfolio excess returns and average beta estimates"
  ) + 
  theme_hierarchy()
```

```{r}
beta_longshort <- beta_portfolios |>
  mutate(portfolio = case_when(
    portfolio == max(as.numeric(portfolio)) ~ "high",
    portfolio == min(as.numeric(portfolio)) ~ "low"
  )) |>
  filter(portfolio %in% c("low", "high")) |>
  pivot_wider(id_cols = month, 
              names_from = portfolio, 
              values_from = ret_excess) |>
  mutate(long_short = high - low) |>
  left_join(factors_ff3_monthly, join_by(month))

coeftest(lm(long_short ~ 1, data = beta_longshort),
  vcov = NeweyWest
)
```

```{r}
coeftest(lm(long_short ~ 1 + mkt_excess, data = beta_longshort),
  vcov = NeweyWest
)
```

```{r}
beta_longshort |>
  group_by(year = year(month)) |>
  summarize(
    low = prod(1 + low) - 1,
    high = prod(1 + high) - 1,
    long_short = prod(1 + long_short) - 1
  ) |>
  pivot_longer(cols = -year) |>
  ggplot(aes(x = year, y = value, fill = name)) +
  geom_col(position = "dodge") +
  facet_wrap(~name, ncol = 1) +
  theme(legend.position = "none") +
  scale_y_continuous(labels = percent) +
  labs(
    title = "Annual returns of beta portfolios",
    x = NULL, y = NULL
  ) + 
  theme_hierarchy()
```
