---
title: "Financial Data"
format: html
toc: true
editor: visual
execute: 
  eval: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false
library(tidyverse)
library(scales)
library(frenchdata)
source(here::here('R/my_functions.R'))
```

```{r}
start_date <- ymd("1960-01-01")
end_date <- ymd("2022-12-31")
```

## Fama-French Data

```{r}
get_french_data_list()

factors_ff3_monthly_raw <- download_french_data('Fama/French 3 Factors')
factors_ff3_monthly <- factors_ff3_monthly_raw %>% 
  pluck('subsets', 'data', 1) %>% 
  janitor::clean_names() %>% 
  mutate(month = floor_date(ymd(paste0(date, '01')), 'month'), across(mkt_rf:rf, \(x) x/100), .keep = 'none') %>% 
  filter(month >= start_date, month <= end_date) %>% 
  rename(mkt_excess = mkt_rf)
```

```{r}
factors_ff5_monthly_raw <- download_french_data('Fama/French 5 Factors (2x3)')
factors_ff5_monthly <- factors_ff5_monthly_raw %>% 
  pluck('subsets', 'data', 1) %>% 
  janitor::clean_names() %>% 
  mutate(month = floor_date(ymd(paste0(date, '01')), 'month'), across(mkt_rf:rf, \(x) x/100), .keep = 'none') %>% 
  filter(month >= start_date, month <= end_date) %>% 
  rename(mkt_excess = mkt_rf)
```

```{r}
factors_ff3_daily_raw <- download_french_data('Fama/French 3 Factors [Daily]')
factors_ff3_daily <- factors_ff3_daily_raw %>% 
  pluck('subsets', 'data', 1) %>% 
  janitor::clean_names() %>% 
  mutate(date = ymd(date), across(mkt_rf:rf, \(x) x/100), .keep = 'none') %>% 
  filter(date >= start_date, date <= end_date) %>% 
  rename(mkt_excess = mkt_rf)
```

```{r}
industries_ff_monthly_raw <- frenchdata::download_french_data('10 Industry Portfolios')

industries_ff_monthly <- industries_ff_monthly_raw %>% 
  pluck('subsets', 'data', 1) %>% 
  janitor::clean_names() %>% 
  mutate(month = floor_date(ymd(paste0(date, '01')), 'month'), across(-c(date, month), \(x) x/100)) %>% 
  filter(month >= start_date, month <= end_date) %>% 
  select(month, everything(), -date)
```

## q-factors

```{r}
factors_q_monthly_link <-
  "https://global-q.org/uploads/1/2/2/6/122679606/q5_factors_monthly_2022.csv"

factors_q_monthly <- read_csv(factors_q_monthly_link) %>% 
  mutate(month = ymd(str_c(year, month, '01', sep = '-')), across(starts_with('R_'), \(x) x/100)) %>% 
  select(-year, -R_F, -R_MKT) %>% 
  rename_with(\(x) str_remove(x, 'R_')) %>% 
  janitor::clean_names() %>% 
  filter(month >= start_date, month <= end_date)
```

## Macroeconomic predictors

```{r}
library(readxl)
macro_predictors_url <-
  "https://docs.google.com/spreadsheets/d/1g4LOaRj4TvwJr9RIaA_nwrXXWTOy46bP/export?format=xlsx"

download.file(
  url = macro_predictors_url, 
  destfile = "macro_predictors.xlsx", 
  mode = "wb"
)

macro_predictors <- read_xlsx(
  "macro_predictors.xlsx",
  sheet = "Monthly"
) |>
  mutate(month = ym(yyyymm)) |>
  mutate(across(where(is.character), as.numeric)) |>
  mutate(
    IndexDiv = Index + D12,
    logret = log(IndexDiv) - log(lag(IndexDiv)),
    Rfree = log(Rfree + 1),
    rp_div = lead(logret - Rfree, 1), # Future excess market return
    dp = log(D12) - log(Index), # Dividend Price ratio
    dy = log(D12) - log(lag(Index)), # Dividend yield
    ep = log(E12) - log(Index), # Earnings price ratio
    de = log(D12) - log(E12), # Dividend payout ratio
    tms = lty - tbl, # Term spread
    dfy = BAA - AAA # Default yield spread
  ) |>
  select(month, rp_div, dp, dy, ep, de, svar,
    bm = `b/m`, ntis, tbl, lty, ltr,
    tms, dfy, infl
  ) |>
  filter(month >= start_date & month <= end_date) |>
  drop_na()

file.remove("macro_predictors.xlsx")
```

## Other macro data

```{r}
library(tidyquant)
cpi_monthly <- tq_get('CPIAUCNS', get = 'economic.data', from = start_date, to = end_date) %>% 
  mutate(month = floor_date(date, 'month'), 
         cpi = price / price[month == max(month)], 
         .keep = 'none')
```

## Setting up a database

```{r}
library(duckdb)
library(dbplyr)
tidy_finance <- dbConnect(duckdb(), dbdir = here::here('data/tidy_finance'))
dbListTables(tidy_finance)

dbWriteTable(tidy_finance, 'factors_ff3_monthly', factors_ff3_monthly, overwrite = T)
tbl(tidy_finance, 'factors_ff3_monthly') %>% select(month, rf)
```

```{r}
dbWriteTable(tidy_finance,
  "factors_ff5_monthly",
  value = factors_ff5_monthly,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "factors_ff3_daily",
  value = factors_ff3_daily,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "industries_ff_monthly",
  value = industries_ff_monthly,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "factors_q_monthly",
  value = factors_q_monthly,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "macro_predictors",
  value = macro_predictors,
  overwrite = TRUE
)

dbWriteTable(tidy_finance,
  "cpi_monthly",
  value = cpi_monthly,
  overwrite = TRUE
)

dbDisconnect(tidy_finance)
```

## WRDS

Note that contents about WRDS - CRSP data in Bali's book is outdated:

> **CRSP Stock and Indexes Version 2**
>
> Introduced in Summer 2022, CRSP CIZ files are newly formatted flat files covering the Stock, Stock62, and Indexes products. These replace the SIZ and older formats, which will be published in parallel for about two years as researchers become accustomed to the new format.
>
> <https://wrds-www.wharton.upenn.edu/pages/support/manuals-and-overviews/crsp/stocks-and-indices/crsp-stock-and-indexes-version-2/>

```{r}
library(RPostgres)
wrds <- dbConnect(Postgres(), 
                       host = "wrds-pgdata.wharton.upenn.edu", 
                       port = 9737, 
                       dbname = 'wrds', 
                       user = Sys.getenv('WRDS_USER'), 
                       password = Sys.getenv('WRDS_PASS'), 
                       sslmode = 'require')
# dbListObjects(wrds, Id(schema = "crsp"))
```

```{r}
msf_db <- tbl(wrds, I('crsp.msf_v2'))
# corresponds to msf table in v1
stksecurityinfohist_db <- tbl(wrds, I("crsp.stksecurityinfohist"))
# corresponds to msenames table in v1
# "All variables for msenames are already in stkSecurityInfoHist table"
```

Common filters and data selection criteria:

i\) we use only stock prices from NYSE, Amex, and NASDAQ (`primaryexch %in% c("N", "A", "Q")`) when or after issuance (`conditionaltype %in% c("RW", "NW")`) for actively traded stocks (`tradingstatusflg == "A"`)

\(ii\) we keep only data in the time windows of interest

\(iii\) we keep only US-listed stocks as identified via no special share types (`sharetype = 'NS'`), security type equity (`securitytype = 'EQTY'`), security sub type common stock (`securitysubtype = 'COM'`), issuers that are a corporation (`issuertype %in% c("ACOR", "CORP")`)

\(iv\) we keep only months within permno-specific start dates (`secinfostartdt`) and end dates (`secinfoenddt`).

As of July 2022, there is no need to additionally download delisting information since it is already contained in the most recent version of `msf`. Additionally, the **industry information in `stksecurityinfohist` records the historic industry and should be used instead of the one stored under same variable name in `msf_v2`.**

```{r}
crsp_monthly <- msf_db %>% 
  filter(mthcaldt >= start_date, mthcaldt <= end_date) %>% 
  select(-c(siccd, primaryexch, conditionaltype, tradingstatusflg)) %>% 
  inner_join(
    stksecurityinfohist_db %>% 
      filter(primaryexch %in% c('N', 'A', 'Q'), 
             conditionaltype %in% c('RW', 'NW'), 
             tradingstatusflg == 'A', 
             sharetype == 'NS', 
             securitytype == 'EQTY',
             securitysubtype == 'COM', 
             usincflg == 'Y', 
             issuertype %in% c('ACOR', 'CORP')) %>% 
      select(permno, secinfostartdt, secinfoenddt,
               primaryexch, siccd), 
    join_by(permno, between(mthcaldt, secinfostartdt, secinfoenddt))
    ) %>% 
  mutate(month = floor_date(mthcaldt, 'month')) %>% 
  select(
    permno, # Security identifier
    date = mthcaldt, # Date of the observation
    month, # Month of the observation
    ret = mthret, # Return
    shrout, # Shares outstanding (in thousands)
    prc = mthprc, # Last traded price in a month
    primaryexch, # Primary exchange code
    siccd # Industry code
  ) %>% 
  collect() %>% 
  mutate(month = ymd(month), 
         shrout = shrout * 1000)

crsp_monthly <- crsp_monthly |>
  mutate(
    mktcap = shrout * prc / 10^6,
    mktcap = na_if(mktcap, 0)
  )

mktcap_lag <- crsp_monthly |>
  mutate(month = month %m+% months(1)) |>
  select(permno, month, mktcap_lag = mktcap)

crsp_monthly <- crsp_monthly |>
  left_join(mktcap_lag, join_by(permno, month))

```

::: callout-note
Note that CRSP data is not necessarily arranged by date for some stocks. must arrange before lag. Another caveat of lag is that it requires the time-series to be continuous, while there could be implicit missing values in real data.
:::

```{r}
crsp_monthly <- crsp_monthly |>
  mutate(exchange = case_when(
    primaryexch == "N" ~ "NYSE",
    primaryexch == "A" ~ "AMEX",
    primaryexch == "Q" ~ "NASDAQ",
    .default = "Other"
  ))

crsp_monthly <- crsp_monthly |>
  mutate(industry = case_when(
    siccd >= 1 & siccd <= 999 ~ "Agriculture",
    siccd >= 1000 & siccd <= 1499 ~ "Mining",
    siccd >= 1500 & siccd <= 1799 ~ "Construction",
    siccd >= 2000 & siccd <= 3999 ~ "Manufacturing",
    siccd >= 4000 & siccd <= 4899 ~ "Transportation",
    siccd >= 4900 & siccd <= 4999 ~ "Utilities",
    siccd >= 5000 & siccd <= 5199 ~ "Wholesale",
    siccd >= 5200 & siccd <= 5999 ~ "Retail",
    siccd >= 6000 & siccd <= 6799 ~ "Finance",
    siccd >= 7000 & siccd <= 8999 ~ "Services",
    siccd >= 9000 & siccd <= 9999 ~ "Public",
    .default = "Missing"
  ))
```

```{r}
tidy_finance <- dbConnect(duckdb(), 'data/tidy_finance')
dbListTables(tidy_finance)
factors_ff3_monthly <- tbl(tidy_finance, 'factors_ff3_monthly') %>% 
  collect()
```

```{r}
crsp_monthly <- crsp_monthly %>% 
  left_join(factors_ff3_monthly %>% select(month, rf), join_by(month)) %>% 
  mutate(ret_excess = ret - rf, 
         ret_excess = pmax(ret_excess, -1)) %>% 
  select(-rf)
crsp_monthly <- crsp_monthly |>
  drop_na(ret_excess, mktcap, mktcap_lag)
  
```

```{r}
dbWriteTable(tidy_finance, 'crsp_monthly', crsp_monthly, overwrite = T)
```

## Summary statistics of crsp_monthly

```{r}
crsp_monthly %>% 
  count(exchange, date) %>% 
  ggplot(aes(date, n, color = exchange)) + 
  geom_line() + 
  theme_hierarchy() + 
  ggsci::scale_color_bmj()

crsp_monthly %>% 
  count(exchange, date) %>% 
  filter(date == ymd('2012-12-31'))
# this sample is quite different from the one in Bali's book: "In December 2012, the CRSP sample is comprised of 3675 stocks, of which 1319 are listed on the NYSE, 226 are listed on the AMEX, and 2130 are listed on the NASDAQ"

crsp_monthly %>% 
  count(exchange, month) %>% 
  filter(month == ymd('2022-12-01'))
```

```{r}
tbl(tidy_finance, 'crsp_monthly') %>% 
  group_by(month, exchange) %>% 
  summarise(mktcap = sum(mktcap, na.rm = T)/1000, .groups = 'drop') %>% 
  left_join(tbl(tidy_finance, 'cpi_monthly'), join_by(month)) %>% 
  mutate(mktcap = mktcap/cpi) %>% 
  collect() %>% 
  ggplot(aes(month, mktcap, color = exchange)) + 
  geom_line() + 
  theme_hierarchy() + 
  ggsci::scale_color_bmj() + 
  scale_x_date(date_breaks = '10 years', date_labels = '%Y') + 
  scale_y_continuous(labels = label_comma())
```

```{r}
cpi_monthly <- tbl(tidy_finance, 'cpi_monthly') %>% 
  collect()

crsp_monthly_industry <- crsp_monthly %>% 
  group_by(industry, month) %>% 
  summarise(
    securities = n_distinct(permno), 
    mktcap = sum(mktcap, na.rm = T), 
    .groups = 'drop'
  ) %>% 
  left_join(cpi_monthly, join_by(month)) %>% 
  mutate(mktcap = mktcap/cpi)

crsp_monthly_industry %>% 
  ggplot(aes(month, securities, color = industry)) + 
  geom_line() + 
  theme_hierarchy() + 
  ggsci::scale_color_futurama()

crsp_monthly_industry %>% 
  ggplot(aes(month, mktcap/1000, color = industry)) + 
  geom_line() + 
  theme_hierarchy() + 
  ggsci::scale_color_futurama()
```

## Compustat

```{r}
funda_db <- tbl(wrds, I("comp.funda"))
```

\(i\) we get only records in industrial data format, which includes companies that are primarily involved in manufacturing, services, and other non-financial business activities

\(ii\) in the standard format (i.e., consolidated information in standard presentation)

\(iii\) only data in the desired time window.

```{r}
compustat <- funda_db |>
  filter(
    indfmt == "INDL" &
      datafmt == "STD" & 
      consol == "C" &
      datadate >= start_date & datadate <= end_date
  ) |>
  select(
    gvkey, # Firm identifier
    datadate, # Date of the accounting data
    seq, # Stockholders' equity
    ceq, # Total common/ordinary equity
    at, # Total assets
    lt, # Total liabilities
    txditc, # Deferred taxes and investment tax credit
    txdb, # Deferred taxes
    itcb, # Investment tax credit
    pstkrv, # Preferred stock redemption value
    pstkl, # Preferred stock liquidating value
    pstk, # Preferred stock par value
    capx, # Capital investment
    oancf, # Operating cash flow
    sale,  # Revenue
    cogs, # Costs of goods sold
    xint, # Interest expense
    xsga # Selling, general, and administrative expenses
  ) |>
  collect()
```

```{r}
compustat <- compustat |>
  mutate(
    be = coalesce(seq, ceq + pstk, at - lt) +
      coalesce(txditc, txdb + itcb, 0) -
      coalesce(pstkrv, pstkl, pstk, 0),
    be = if_else(be <= 0, NA, be),
    op = (sale - coalesce(cogs, 0) - 
            coalesce(xsga, 0) - coalesce(xint, 0)) / be,
  )
```

```{r}
compustat <- compustat |>
  mutate(year = year(datadate)) |>
  group_by(gvkey, year) |>
  filter(datadate == max(datadate)) |>
  ungroup()
```

```{r}
compustat <- compustat |> 
  left_join(
    compustat |> 
      select(gvkey, year, at_lag = at) |> 
      mutate(year = year + 1), 
    join_by(gvkey, year)
  ) |> 
  mutate(
    inv = at / at_lag - 1,
    inv = if_else(at_lag <= 0, NA, inv)
  )
```

```{r}
dbWriteTable(tidy_finance,
  "compustat",
  value = compustat,
  overwrite = TRUE
)
```

## CCM link table

```{r}
ccmxpf_linktable_db <- tbl(wrds, I("crsp.ccmxpf_linktable"))
```

```{r}
ccmxpf_linktable <- ccmxpf_linktable_db |>
  filter(linktype %in% c("LU", "LC") &
    linkprim %in% c("P", "C") &
    usedflag == 1) |>
  select(permno = lpermno, gvkey, linkdt, linkenddt) |>
  collect() |>
  mutate(linkenddt = replace_na(linkenddt, today()))
```

```{r}
ccm_links <- crsp_monthly |>
  inner_join(ccmxpf_linktable, 
             join_by(permno, between(date, linkdt, linkenddt))) |>
  filter(!is.na(gvkey)) |>
  select(permno, gvkey, date)

dbWriteTable(tidy_finance, 'ccm_links', ccm_links, overwrite = T)

crsp_monthly <- crsp_monthly |>
  left_join(ccm_links, join_by(permno, date))

dbWriteTable(tidy_finance,
  "crsp_monthly",
  value = crsp_monthly,
  overwrite = TRUE
)
```

```{r}
dbListTables(tidy_finance)
dbDisconnect(tidy_finance)
tidy_finance <- dbConnect(duckdb(), here::here('data/tidy_finance'))
```

## Bond data: TRACE & FISD

```{r}
fisd_mergedissue_db <- tbl(wrds, I("fisd.fisd_mergedissue"))

fisd <- fisd_mergedissue_db |>
  filter(
    security_level == "SEN",
    slob == "N" | is.na(slob),
    is.na(security_pledge),
    asset_backed == "N" | is.na(asset_backed),
    defeased == "N" | is.na(defeased),
    is.na(defeased_date),
    bond_type %in% c(
      "CDEB",
      "CMTN",
      "CMTZ",
      "CZ",
      "USBN"
    ), 
    pay_in_kind != "Y" | is.na(pay_in_kind),
    is.na(pay_in_kind_exp_date),
    yankee == "N" | is.na(yankee),
    canadian == "N" | is.na(canadian),
    foreign_currency == "N",
    coupon_type %in% c(
      "F",
      "Z"
    ), 
    is.na(fix_frequency),
    coupon_change_indicator == "N",
    interest_frequency %in% c(
      "0",
      "1",
      "2",
      "4",
      "12"
    ),
    rule_144a == "N",
    private_placement == "N" | is.na(private_placement),
    defaulted == "N",
    is.na(filing_date),
    is.na(settlement),
    convertible == "N",
    is.na(exchange),
    putable == "N" | is.na(putable),
    unit_deal == "N" | is.na(unit_deal),
    exchangeable == "N" | is.na(exchangeable),
    perpetual == "N",
    preferred_security == "N" | is.na(preferred_security)
  ) |> 
  select(
    complete_cusip, maturity,
    offering_amt, offering_date,
    dated_date, 
    interest_frequency, coupon,
    last_interest_date, 
    issue_id, issuer_id
  ) |>
  collect()
```

```{r}
fisd_mergedissuer_db <- tbl(wrds, I("fisd.fisd_mergedissuer")) 

fisd_issuer <- fisd_mergedissuer_db |>
  select(issuer_id, sic_code, country_domicile) |>
  collect()

fisd <- fisd |>
  inner_join(fisd_issuer, join_by(issuer_id)) |>
  filter(country_domicile == "USA") |>
  select(-country_domicile)

dbWriteTable(
  conn = tidy_finance,
  name = "fisd",
  value = fisd,
  overwrite = TRUE
)
```
