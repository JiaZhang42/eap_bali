---
title: "Value and Bivariate Sort"
format: html
toc: true
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  eval: false
---

book-to-market ratio has a positive relation with expected stock returns.

interpretation:

-   risk-based

-   behavioral

```{r}
library(tidyverse)
library(duckdb)
library(scales)
source(here::here('R/my_functions.R'))
```

```{r}
tidy_finance <- dbConnect(duckdb::duckdb(), here::here('data/tidy_finance'))

crsp_monthly <- tbl(tidy_finance, "crsp_monthly") %>% 
  select(permno, gvkey, month, ret_excess, mktcap, mktcap_lag, exchange) %>% 
  collect() %>% 
  drop_na()

book_equity <- tbl(tidy_finance, 'compustat') %>% 
  select(gvkey, datadate, be) %>% 
  collect() %>% 
  drop_na() %>% 
  mutate(month = floor_date(datadate, "month"))
```

## Timeline Adjustment

> After matching the accounting and market equity information from the same month, we lag book-to-market by six months. This is a sufficiently conservative approach because accounting information is usually released well before six months pass.

```{r}
me <- crsp_monthly %>% 
  mutate(sorting_date = month %m+% months(1)) %>% 
  select(permno, sorting_date, me = mktcap)

bm <- book_equity %>% 
  inner_join(crsp_monthly, join_by(gvkey, month)) %>% 
  mutate(bm = be/mktcap, sorting_date = month %m+% months(6), 
         comp_date = sorting_date) %>% 
  select(permno, gvkey, sorting_date, comp_date, bm)
```

```{r}
data_for_sorts <- crsp_monthly %>% 
  left_join(me, join_by(permno, month == sorting_date)) %>% 
  left_join(bm, join_by(permno, gvkey, month == sorting_date))
```

```{r}
data_for_sorts <- data_for_sorts |>
  arrange(permno, gvkey, month) |>
  group_by(permno, gvkey) |>
  fill(bm, comp_date) |>
  ungroup() |> 
  filter(comp_date > month %m-% months(12)) |>
  select(-comp_date) |>
  drop_na()

# the datadate of bm for each month is actually lagged 6-18 months.
```

```{r}
assign_portfolio <- function(data, sorting_variable, n_portfolios, exchanges){
  breakpoints <- data %>% 
    filter(exchange %in% exchanges) %>% 
    pull({{ sorting_variable }}) %>% 
    quantile(seq(0, 1, length.out = n_portfolios + 1), 
             na.rm = T, 
             names = F)

  data %>% 
    pull({{ sorting_variable }}) %>% 
    findInterval(breakpoints, all.inside = T)
}
```

## Value Distribution

```{r}
book_equity %>%
  select(be) %>% 
  mutate(qt = ntile(be, 100)/100) %>% 
  arrange(be) %>% 
  group_by(qt) %>% 
  summarise(be = sum(be), .groups = 'drop') %>% 
  mutate(be_cumsum = cumsum(be)/sum(be)) %>% 
  ggplot(aes(qt, be_cumsum)) + 
  geom_path() + 
  geom_abline(slope = 1, intercept = 0, linetype = 'dashed') + 
  scale_y_continuous(limits = c(0, 1), labels = label_percent()) + 
  scale_x_continuous(limits = c(0, 1), labels = label_percent()) + 
  theme_hierarchy()
```

## Independent sort

```{r}
value_portfolios <- data_for_sorts |>
  group_by(month) |>
  mutate(
    portfolio_bm = assign_portfolio(
      data = pick(everything()),
      sorting_variable = "bm",
      n_portfolios = 5,
      exchanges = c("NYSE")
    ),
    portfolio_me = assign_portfolio(
      data = pick(everything()),
      sorting_variable = "me",
      n_portfolios = 5,
      exchanges = c("NYSE")
    )) |>
  group_by(month, portfolio_bm, portfolio_me) |>
  summarize(
    ret = weighted.mean(ret_excess, mktcap_lag),
    .groups = "drop"
  )
```

```{r}
value_premium <- value_portfolios |>
  group_by(month, portfolio_bm) |>
  summarize(ret = mean(ret), .groups = "drop_last") |>
  summarize(
    value_premium = ret[portfolio_bm == max(portfolio_bm)] -
      ret[portfolio_bm == min(portfolio_bm)]
  ) |> 
  summarize(
    value_premium = mean(value_premium)
  )
```

## Dependent sort

dependent sorts ensure an equal amount of stocks within each portfolio.

```{r}
value_portfolios <- data_for_sorts |>
  group_by(month) |>
  mutate(
    portfolio_me = assign_portfolio(
      data = pick(everything()),
      sorting_variable = "me",
      n_portfolios = 5,
      exchanges = c("NYSE")
    )) |>
  group_by(month, portfolio_me) |> 
  mutate(
    portfolio_bm = assign_portfolio(
      data = pick(everything()),
      sorting_variable = "bm",
      n_portfolios = 5,
      exchanges = c("NYSE")
    )) %>% 
  group_by(month, portfolio_me, portfolio_bm) %>% 
  summarize(
    ret = weighted.mean(ret_excess, mktcap_lag),
    .groups = "drop"
  )


value_premium <- value_portfolios |>
  group_by(month, portfolio_bm) |>
  summarize(ret = mean(ret), .groups = "drop_last") |>
  summarize(
    value_premium = ret[portfolio_bm == max(portfolio_bm)] -
      ret[portfolio_bm == min(portfolio_bm)]
  ) |> 
  summarize(
    value_premium = mean(value_premium)
  )
```

Dependent-sort is used when the objective is to understand the relation between X2 and Y conditional on X1. The relation between X1 and Y is not examined in dependent-sort analysis.

Independent-sort permits examination of relation between any one of the X and Y, controlling for the other X.
